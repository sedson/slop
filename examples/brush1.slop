(seed 322)

(defn remap [val minIn maxIn minOut maxOut]
  (+ (* (/ (- val minIn) (- maxIn minIn)) (- maxOut minOut)) minOut))

(defn hsl [h s l]
  (set s (join (clamp s 0 100) "%"))
  (set l (join (clamp l 0 100) "%"))
  (join "hsl(" h "," s "," l ")"))

(defn rand-range (mn mx)
  (remap (rand) 0 1 mn mx))

(def cnvs 
  (-> (->canvas 1024 1024)
      (fx (x.fill (hsl 0 10 0)))))

(defn brush-fn (pt)
  (def hue-jitter (rand-range 0 100))
  (def size-jitter (rand-range -10 10))

  (def brush-col (hsl (+ 200 hue-jitter) 80 80))
  (def radius (clamp (+ 20 size-jitter) 0 1000)) 
  (def [x y] pt)
  (cnvs.ellipse x y radius radius brush-col))

(def pts (viewport.brushPoints cnvs.id))
(for-each pts brush-fn)
  
(view cnvs)